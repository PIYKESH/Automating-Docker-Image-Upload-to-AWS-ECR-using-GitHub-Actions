name: Docker Build and Push

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REGISTRY: 178990828536.dkr.ecr.us-east-1.amazonaws.com/piyu
      ECR_REPOSITORY: piyu  
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          echo "Login Succeeded"

      - name: Build Docker Image
        id: build-image
        run: |
         docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
         echo "::set-output name=image_uri::${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"


      - name: Cache Docker layers
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            /var/lib/docker
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
        if: steps.build-image.outputs.image_uri != 'false'

      - name: Push Docker Image to ECR
        if: steps.build-image.outputs.image_uri != 'false'
        run: |
          docker push ${{ steps.build-image.outputs.image_uri }}

      - name: Update ECS Service
        if: success() && contains(github.event_name, 'push')
        run: |
          # Your deployment or service update steps go here
